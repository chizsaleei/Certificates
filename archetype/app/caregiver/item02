<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Caregiver Compass - Self-Care Planner</title>
    <style>
        body {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #0a1f0d 0%, #1a3d1f 25%, #0f2d15 50%, #1e4a25 75%, #0a1f0d 100%);
            color: #ffffff;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 25px;
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.7) 0%, rgba(26, 61, 31, 0.5) 50%, rgba(30, 74, 37, 0.3) 100%);
            border-radius: 20px;
            border: 2px solid #d4af37;
            box-shadow: 0 15px 30px rgba(212, 175, 55, 0.2);
        }

        .header h1 {
            margin: 0 0 10px 0;
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #d4af37 0%, #f4d03f 50%, #b8860b 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header p {
            margin: 0;
            font-size: 1.1rem;
            color: #a8d4a8;
            opacity: 0.9;
        }

        .main-grid {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 25px;
            margin-bottom: 30px;
        }

        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .card {
            background: linear-gradient(135deg, rgba(26, 61, 31, 0.4) 0%, rgba(15, 45, 21, 0.6) 100%);
            border-radius: 15px;
            border: 2px solid #2d5a3d;
            padding: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
        }

        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%);
        }

        .card-title {
            color: #d4af37;
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0 0 15px 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .mood-checkin {
            text-align: center;
        }

        .mood-scale {
            display: flex;
            justify-content: space-between;
            margin: 15px 0;
            gap: 5px;
        }

        .mood-btn {
            width: 40px;
            height: 40px;
            border: 2px solid #2d5a3d;
            border-radius: 50%;
            background: rgba(30, 74, 37, 0.4);
            color: #ffffff;
            font-size: 1.2rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .mood-btn:hover {
            border-color: #d4af37;
            background: rgba(212, 175, 55, 0.2);
            transform: scale(1.1);
        }

        .mood-btn.selected {
            border-color: #d4af37;
            background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%);
            color: #0a1f0d;
        }

        .mood-labels {
            display: flex;
            justify-content: space-between;
            font-size: 0.8rem;
            color: #a8d4a8;
            margin-top: 5px;
        }

        .energy-tracker {
            margin-top: 15px;
        }

        .energy-bar {
            width: 100%;
            height: 8px;
            background: rgba(30, 74, 37, 0.4);
            border-radius: 4px;
            margin: 10px 0;
            cursor: pointer;
            position: relative;
        }

        .energy-fill {
            height: 100%;
            background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%);
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .energy-label {
            font-size: 0.9rem;
            color: #a8d4a8;
            margin-bottom: 5px;
        }

        .quick-resets {
            max-height: 300px;
            overflow-y: auto;
        }

        .reset-category {
            margin-bottom: 15px;
        }

        .category-title {
            color: #d4af37;
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .reset-item {
            background: rgba(30, 74, 37, 0.3);
            border: 1px solid #2d5a3d;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .reset-item:hover {
            border-color: #d4af37;
            background: rgba(212, 175, 55, 0.1);
        }

        .reset-name {
            font-size: 0.9rem;
            color: #e8f5e8;
        }

        .reset-duration {
            font-size: 0.8rem;
            color: #d4af37;
            background: rgba(212, 175, 55, 0.2);
            padding: 2px 8px;
            border-radius: 12px;
        }

        .calendar-section {
            background: rgba(15, 45, 21, 0.6);
            border: 2px solid #1e4a25;
            border-radius: 15px;
            padding: 20px;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .calendar-title {
            color: #d4af37;
            font-size: 1.3rem;
            font-weight: 600;
            margin: 0;
        }

        .calendar-nav {
            display: flex;
            gap: 10px;
        }

        .nav-btn {
            background: rgba(212, 175, 55, 0.1);
            border: 2px solid #2d5a3d;
            border-radius: 8px;
            color: #d4af37;
            padding: 8px 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .nav-btn:hover {
            border-color: #d4af37;
            background: rgba(212, 175, 55, 0.2);
        }

        .week-view {
            display: grid;
            grid-template-columns: 80px repeat(7, 1fr);
            gap: 1px;
            background: #2d5a3d;
            border-radius: 10px;
            overflow: hidden;
        }

        .time-slot, .day-header, .calendar-cell {
            background: rgba(15, 45, 21, 0.8);
            padding: 10px;
            min-height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .day-header {
            background: rgba(26, 61, 31, 0.8);
            color: #d4af37;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .time-slot {
            background: rgba(26, 61, 31, 0.6);
            color: #a8d4a8;
            font-size: 0.8rem;
            justify-content: flex-end;
            padding-right: 8px;
        }

        .calendar-cell {
            cursor: pointer;
            transition: all 0.3s ease;
            flex-direction: column;
            align-items: stretch;
            padding: 5px;
            gap: 2px;
        }

        .calendar-cell:hover {
            background: rgba(212, 175, 55, 0.1);
        }

        .self-care-block {
            background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%);
            color: #0a1f0d;
            border-radius: 4px;
            padding: 4px 6px;
            font-size: 0.7rem;
            font-weight: 600;
            margin-bottom: 2px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .self-care-block:hover {
            transform: scale(1.02);
            box-shadow: 0 2px 8px rgba(212, 175, 55, 0.4);
        }

        .self-care-block.non-negotiable {
            background: linear-gradient(135deg, #dc3545 0%, #ff6b7a 100%);
            color: #ffffff;
            border: 1px solid #dc3545;
        }

        .self-care-block.non-negotiable::before {
            content: 'üõ°Ô∏è ';
        }

        .add-block-btn {
            background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%);
            color: #0a1f0d;
            border: none;
            padding: 12px 20px;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 15px;
            width: 100%;
        }

        .add-block-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(212, 175, 55, 0.4);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: linear-gradient(135deg, rgba(26, 61, 31, 0.95) 0%, rgba(15, 45, 21, 0.95) 100%);
            border: 2px solid #d4af37;
            border-radius: 15px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-title {
            color: #d4af37;
            font-size: 1.4rem;
            font-weight: 600;
            margin: 0 0 20px 0;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            color: #e8f5e8;
            font-size: 0.9rem;
            margin-bottom: 5px;
            display: block;
        }

        .form-input, .form-select, .form-textarea {
            width: 100%;
            background: rgba(30, 74, 37, 0.4);
            border: 2px solid #2d5a3d;
            border-radius: 8px;
            padding: 10px;
            color: #ffffff;
            font-size: 1rem;
            outline: none;
            transition: all 0.3s ease;
        }

        .form-input:focus, .form-select:focus, .form-textarea:focus {
            border-color: #d4af37;
            background: rgba(212, 175, 55, 0.1);
        }

        .form-textarea {
            resize: vertical;
            min-height: 80px;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }

        .checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid #2d5a3d;
            border-radius: 4px;
            background: transparent;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .checkbox.checked {
            background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%);
            border-color: #d4af37;
            color: #0a1f0d;
        }

        .modal-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%);
            color: #0a1f0d;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(212, 175, 55, 0.4);
        }

        .btn-secondary {
            background: rgba(45, 90, 61, 0.6);
            color: #ffffff;
            border: 1px solid #2d5a3d;
        }

        .btn-secondary:hover {
            border-color: #d4af37;
            background: rgba(212, 175, 55, 0.1);
        }

        .breathing-exercise {
            text-align: center;
            padding: 20px;
        }

        .breathing-circle {
            width: 120px;
            height: 120px;
            border: 3px solid #d4af37;
            border-radius: 50%;
            margin: 20px auto;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.1rem;
            color: #d4af37;
            transition: all 4s ease-in-out;
        }

        .breathing-circle.inhale {
            transform: scale(1.3);
            background: rgba(212, 175, 55, 0.1);
        }

        .breathing-circle.exhale {
            transform: scale(0.8);
            background: transparent;
        }

        .breathing-controls {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 15px;
        }

        .affirmation-content {
            text-align: center;
        }

        .affirmation-text {
            background: rgba(212, 175, 55, 0.1);
            border: 1px solid rgba(212, 175, 55, 0.3);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            font-size: 1.1rem;
            line-height: 1.5;
            color: #e8f5e8;
            font-style: italic;
            position: relative;
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .affirmation-text::before {
            content: '"';
            position: absolute;
            top: 5px;
            left: 15px;
            font-size: 2rem;
            color: #d4af37;
            opacity: 0.5;
        }

        .affirmation-text::after {
            content: '"';
            position: absolute;
            bottom: 5px;
            right: 15px;
            font-size: 2rem;
            color: #d4af37;
            opacity: 0.5;
        }

        .affirmation-text {
            transition: opacity 0.3s ease;
        }

        .toast {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: linear-gradient(135deg, #d4af37 0%, #f4d03f 100%);
            color: #0a1f0d;
            padding: 15px 25px;
            border-radius: 12px;
            font-weight: 600;
            z-index: 1001;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
            max-width: 300px;
        }

        .toast.show {
            transform: translateX(0);
        }

        .stats-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: rgba(15, 45, 21, 0.6);
            border: 2px solid #1e4a25;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
        }

        .stat-number {
            color: #d4af37;
            font-size: 2rem;
            font-weight: 700;
            display: block;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #a8d4a8;
            font-size: 0.9rem;
        }

        @media (max-width: 1024px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
            
            .week-view {
                grid-template-columns: 60px repeat(7, 1fr);
            }
        }

        @media (max-width: 768px) {
            .week-view {
                grid-template-columns: 50px repeat(3, 1fr);
            }
            
            .calendar-cell {
                min-height: 60px;
            }
            
            .modal-content {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß≠ Caregiver Compass</h1>
            <p>Your self-care isn't selfish‚Äîit's essential. Protect your recharge time.</p>
        </div>

        <div class="stats-row">
            <div class="stat-card">
                <span class="stat-number" id="weeklyHours">0</span>
                <span class="stat-label">Hours This Week</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="protectedSlots">0</span>
                <span class="stat-label">Protected Slots</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="moodTrend">--</span>
                <span class="stat-label">Mood Trend</span>
            </div>
        </div>

        <div class="main-grid">
            <div class="sidebar">
                <!-- Mood Check-in -->
                <div class="card mood-checkin">
                    <h3 class="card-title">üíö How are you feeling?</h3>
                    <div class="mood-scale">
                        <button class="mood-btn" data-mood="1" onclick="setMood(1)">üò∞</button>
                        <button class="mood-btn" data-mood="2" onclick="setMood(2)">üòî</button>
                        <button class="mood-btn" data-mood="3" onclick="setMood(3)">üòê</button>
                        <button class="mood-btn" data-mood="4" onclick="setMood(4)">üôÇ</button>
                        <button class="mood-btn" data-mood="5" onclick="setMood(5)">üòä</button>
                    </div>
                    <div class="mood-labels">
                        <span>Overwhelmed</span>
                        <span>Drained</span>
                        <span>Okay</span>
                        <span>Good</span>
                        <span>Energized</span>
                    </div>
                    
                    <div class="energy-tracker">
                        <div class="energy-label">Energy Level: <span id="energyValue">50%</span></div>
                        <div class="energy-bar" onclick="setEnergy(event)">
                            <div class="energy-fill" id="energyFill" style="width: 50%"></div>
                        </div>
                    </div>
                </div>

                <!-- Quick Resets -->
                <div class="card quick-resets">
                    <h3 class="card-title">‚ö° Quick Resets</h3>
                    
                    <div class="reset-category">
                        <div class="category-title">5 Minutes</div>
                        <div class="reset-item" onclick="startQuickReset('Deep breathing', 5)">
                            <span class="reset-name">Deep breathing</span>
                            <span class="reset-duration">5 min</span>
                        </div>
                        <div class="reset-item" onclick="startQuickReset('Gratitude list', 5)">
                            <span class="reset-name">Gratitude list</span>
                            <span class="reset-duration">5 min</span>
                        </div>
                        <div class="reset-item" onclick="startQuickReset('Gentle stretches', 5)">
                            <span class="reset-name">Gentle stretches</span>
                            <span class="reset-duration">5 min</span>
                        </div>
                    </div>
                    
                    <div class="reset-category">
                        <div class="category-title">15 Minutes</div>
                        <div class="reset-item" onclick="startQuickReset('Mindful tea/coffee', 15)">
                            <span class="reset-name">Mindful tea/coffee</span>
                            <span class="reset-duration">15 min</span>
                        </div>
                        <div class="reset-item" onclick="startQuickReset('Journal writing', 15)">
                            <span class="reset-name">Journal writing</span>
                            <span class="reset-duration">15 min</span>
                        </div>
                        <div class="reset-item" onclick="startQuickReset('Nature observation', 15)">
                            <span class="reset-name">Nature observation</span>
                            <span class="reset-duration">15 min</span>
                        </div>
                    </div>
                    
                    <div class="reset-category">
                        <div class="category-title">30 Minutes</div>
                        <div class="reset-item" onclick="startQuickReset('Relaxing bath', 30)">
                            <span class="reset-name">Relaxing bath</span>
                            <span class="reset-duration">30 min</span>
                        </div>
                        <div class="reset-item" onclick="startQuickReset('Creative activity', 30)">
                            <span class="reset-name">Creative activity</span>
                            <span class="reset-duration">30 min</span>
                        </div>
                        <div class="reset-item" onclick="startQuickReset('Gentle exercise', 30)">
                            <span class="reset-name">Gentle exercise</span>
                            <span class="reset-duration">30 min</span>
                        </div>
                    </div>
                </div>

                <!-- Daily Affirmation -->
                <div class="card">
                    <h3 class="card-title">üí´ Daily Affirmation</h3>
                    <div class="affirmation-content">
                        <div class="affirmation-text" id="affirmationText">Loading your daily reminder...</div>
                        <button class="btn btn-primary" onclick="getNewAffirmation()" style="margin-top: 15px; width: 100%; font-size: 0.9rem; padding: 8px;">
                            ‚ú® New Affirmation
                        </button>
                    </div>
                </div>

                <!-- Breathing Exercise -->
                <div class="card breathing-exercise">
                    <h3 class="card-title">ü´Å Breathing Space</h3>
                    <div class="breathing-circle" id="breathingCircle">Breathe</div>
                    <div class="breathing-controls">
                        <button class="btn btn-primary" onclick="startBreathing()">Start</button>
                        <button class="btn btn-secondary" onclick="stopBreathing()">Stop</button>
                    </div>
                </div>
            </div>

            <!-- Calendar Section -->
            <div class="calendar-section">
                <div class="calendar-header">
                    <h2 class="calendar-title">üìÖ Your Self-Care Schedule</h2>
                    <div class="calendar-nav">
                        <button class="nav-btn" onclick="changeWeek(-1)">‚Üê Previous</button>
                        <button class="nav-btn" onclick="changeWeek(1)">Next ‚Üí</button>
                    </div>
                </div>
                
                <div class="week-view" id="weekView">
                    <!-- Calendar will be generated here -->
                </div>
                
                <button class="add-block-btn" onclick="showAddBlockModal()">
                    ‚ûï Schedule Self-Care Time
                </button>
            </div>
        </div>
    </div>

    <!-- Add Block Modal -->
    <div class="modal" id="addBlockModal">
        <div class="modal-content">
            <h3 class="modal-title">Schedule Self-Care Time</h3>
            
            <div class="form-group">
                <label class="form-label">Activity</label>
                <input type="text" class="form-input" id="activityName" placeholder="e.g., Morning meditation, Walk in park">
            </div>
            
            <div class="form-group">
                <label class="form-label">Day</label>
                <select class="form-select" id="activityDay">
                    <option value="0">Sunday</option>
                    <option value="1">Monday</option>
                    <option value="2">Tuesday</option>
                    <option value="3">Wednesday</option>
                    <option value="4">Thursday</option>
                    <option value="5">Friday</option>
                    <option value="6">Saturday</option>
                </select>
            </div>
            
            <div class="form-group">
                <label class="form-label">Time</label>
                <select class="form-select" id="activityTime">
                    <option value="6">6:00 AM</option>
                    <option value="7">7:00 AM</option>
                    <option value="8">8:00 AM</option>
                    <option value="9">9:00 AM</option>
                    <option value="10">10:00 AM</option>
                    <option value="11">11:00 AM</option>
                    <option value="12">12:00 PM</option>
                    <option value="13">1:00 PM</option>
                    <option value="14">2:00 PM</option>
                    <option value="15">3:00 PM</option>
                    <option value="16">4:00 PM</option>
                    <option value="17">5:00 PM</option>
                    <option value="18">6:00 PM</option>
                    <option value="19">7:00 PM</option>
                    <option value="20">8:00 PM</option>
                    <option value="21">9:00 PM</option>
                </select>
            </div>
            
            <div class="form-group">
                <label class="form-label">Duration</label>
                <select class="form-select" id="activityDuration">
                    <option value="0.25">15 minutes</option>
                    <option value="0.5">30 minutes</option>
                    <option value="1">1 hour</option>
                    <option value="1.5">1.5 hours</option>
                    <option value="2">2 hours</option>
                </select>
            </div>
            
            <div class="checkbox-group">
                <div class="checkbox" id="nonNegotiableCheck" onclick="toggleNonNegotiable()"></div>
                <label class="form-label" style="margin: 0;">üõ°Ô∏è Make this non-negotiable (protected time)</label>
            </div>
            
            <div class="form-group">
                <label class="form-label">Notes (optional)</label>
                <textarea class="form-textarea" id="activityNotes" placeholder="Any special notes or reminders..."></textarea>
            </div>
            
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeAddBlockModal()">Cancel</button>
                <button class="btn btn-primary" onclick="addSelfCareBlock()">Schedule</button>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div class="toast" id="toast"></div>

    <script>
        let currentWeekStart = new Date();
        let selfCareBlocks = [];
        let moodEntries = [];
        let energyLevel = 50;
        let currentMood = null;
        let breathingInterval = null;
        let isNonNegotiable = false;

        const caregiverAffirmations = [
            "You are not just caring for others‚Äîyou are making the world a more compassionate place.",
            "Your self-care is not selfish. It's the foundation that allows you to care for others.",
            "Every moment you take for yourself makes you a better caregiver.",
            "You deserve the same love and care that you give so freely to others.",
            "Taking breaks doesn't make you weak‚Äîit makes you wise.",
            "Your needs matter just as much as the needs of those you care for.",
            "You are doing an incredible job, even when it doesn't feel like it.",
            "It's okay to ask for help. Even caregivers need care.",
            "You cannot pour from an empty cup. Fill yours first.",
            "Your compassion is a gift, but don't forget to give some to yourself.",
            "Rest is not a luxury‚Äîit's a necessity for sustainable caregiving.",
            "You are stronger than you know and more appreciated than you realize.",
            "Taking time for yourself is not taking time away from others‚Äîit's investing in your ability to care.",
            "Your well-being is the cornerstone of everyone else's well-being.",
            "You are allowed to have bad days. You're human, not superhuman.",
            "Every small act of self-care is an act of love toward yourself and those you serve.",
            "You don't have to be perfect. You just have to be present.",
            "Your mental health is just as important as your physical health.",
            "It's okay to say no sometimes. Boundaries are healthy.",
            "You are making a difference in ways you may never fully know.",
            "Taking care of yourself is the most unselfish thing you can do.",
            "You are worthy of the same kindness you show others.",
            "Your efforts are seen, valued, and deeply appreciated.",
            "It's okay to feel overwhelmed. What matters is that you keep going.",
            "You have permission to rest without guilt.",
            "Your heart is big enough to include yourself in your circle of care.",
            "You are not responsible for fixing everything or everyone.",
            "Taking a moment to breathe is taking a moment to heal.",
            "You are exactly where you need to be, doing exactly what you need to do.",
            "Your dedication is inspiring, but your well-being is essential.",
            "You are allowed to prioritize your own needs without explanation.",
            "Every day you show up is a testament to your incredible strength.",
            "You deserve peace, joy, and moments of pure happiness.",
            "Your self-compassion is just as important as your compassion for others.",
            "You are not alone in this journey. Support is available when you need it.",
            "Taking care of yourself is the greatest gift you can give to those you love.",
            "You have the right to feel all your emotions without judgment.",
            "Your resilience is remarkable, but it's okay to lean on others sometimes.",
            "You are more than your role as a caregiver‚Äîyou are a whole, complete person.",
            "Every moment of self-care is a step toward a healthier, happier you."
        ];

        // Set current week to start of week (Sunday)
        currentWeekStart.setDate(currentWeekStart.getDate() - currentWeekStart.getDay());
        currentWeekStart.setHours(0, 0, 0, 0);

        function initializeApp() {
            loadData();
            generateCalendar();
            updateStats();
            loadTodaysMood();
            loadDailyAffirmation();
        }

        function loadDailyAffirmation() {
            const today = new Date().toDateString();
            const savedDate = localStorage.getItem('caregiverCompass_affirmationDate');
            let affirmationIndex = parseInt(localStorage.getItem('caregiverCompass_affirmationIndex')) || 0;
            
            // If it's a new day, get a new affirmation
            if (savedDate !== today) {
                affirmationIndex = Math.floor(Math.random() * caregiverAffirmations.length);
                localStorage.setItem('caregiverCompass_affirmationDate', today);
                localStorage.setItem('caregiverCompass_affirmationIndex', affirmationIndex);
            }
            
            displayAffirmation(affirmationIndex);
        }

        function getNewAffirmation() {
            const currentIndex = parseInt(localStorage.getItem('caregiverCompass_affirmationIndex')) || 0;
            let newIndex;
            
            // Make sure we don't get the same affirmation twice in a row
            do {
                newIndex = Math.floor(Math.random() * caregiverAffirmations.length);
            } while (newIndex === currentIndex && caregiverAffirmations.length > 1);
            
            localStorage.setItem('caregiverCompass_affirmationIndex', newIndex);
            displayAffirmation(newIndex);
            
            showToast('üí´ Here\'s a fresh reminder of your worth and strength!');
        }

        function displayAffirmation(index) {
            const affirmationText = document.getElementById('affirmationText');
            const affirmation = caregiverAffirmations[index];
            
            // Add a gentle fade effect
            affirmationText.style.opacity = '0';
            
            setTimeout(() => {
                affirmationText.textContent = affirmation;
                affirmationText.style.opacity = '1';
            }, 200);
        }

        function generateCalendar() {
            const weekView = document.getElementById('weekView');
            const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            const hours = Array.from({length: 16}, (_, i) => i + 6); // 6 AM to 9 PM
            
            let html = '<div class="time-slot"></div>';
            
            // Day headers
            days.forEach((day, index) => {
                const date = new Date(currentWeekStart);
                date.setDate(date.getDate() + index);
                const isToday = date.toDateString() === new Date().toDateString();
                html += `<div class="day-header" style="${isToday ? 'background: rgba(212, 175, 55, 0.2);' : ''}">${day}<br><small>${date.getDate()}</small></div>`;
            });
            
            // Time slots and calendar cells
            hours.forEach(hour => {
                const timeStr = hour <= 12 ? `${hour}:00 AM` : `${hour - 12}:00 PM`;
                if (hour === 12) timeStr = '12:00 PM';
                html += `<div class="time-slot">${timeStr}</div>`;
                
                days.forEach((day, dayIndex) => {
                    const cellId = `cell-${dayIndex}-${hour}`;
                    html += `<div class="calendar-cell" id="${cellId}" onclick="quickSchedule(${dayIndex}, ${hour})"></div>`;
                });
            });
            
            weekView.innerHTML = html;
            renderSelfCareBlocks();
        }

        function renderSelfCareBlocks() {
            // Clear existing blocks
            document.querySelectorAll('.self-care-block').forEach(block => block.remove());
            
            selfCareBlocks.forEach(block => {
                const blockDate = new Date(block.date);
                const weekStart = new Date(currentWeekStart);
                const weekEnd = new Date(weekStart);
                weekEnd.setDate(weekEnd.getDate() + 7);
                
                if (blockDate >= weekStart && blockDate < weekEnd) {
                    const dayIndex = blockDate.getDay();
                    const hour = blockDate.getHours();
                    const cellId = `cell-${dayIndex}-${hour}`;
                    const cell = document.getElementById(cellId);
                    
                    if (cell) {
                        const blockElement = document.createElement('div');
                        blockElement.className = `self-care-block ${block.nonNegotiable ? 'non-negotiable' : ''}`;
                        blockElement.textContent = block.activity;
                        blockElement.title = `${block.activity}${block.notes ? '\n' + block.notes : ''}`;
                        blockElement.onclick = (e) => {
                            e.stopPropagation();
                            editBlock(block.id);
                        };
                        cell.appendChild(blockElement);
                    }
                }
            });
        }

        function quickSchedule(dayIndex, hour) {
            const modal = document.getElementById('addBlockModal');
            document.getElementById('activityDay').value = dayIndex;
            document.getElementById('activityTime').value = hour;
            modal.classList.add('show');
        }

        function showAddBlockModal() {
            document.getElementById('addBlockModal').classList.add('show');
        }

        function closeAddBlockModal() {
            document.getElementById('addBlockModal').classList.remove('show');
            resetModalForm();
        }

        function resetModalForm() {
            document.getElementById('activityName').value = '';
            document.getElementById('activityNotes').value = '';
            document.getElementById('nonNegotiableCheck').classList.remove('checked');
            isNonNegotiable = false;
        }

        function toggleNonNegotiable() {
            const checkbox = document.getElementById('nonNegotiableCheck');
            isNonNegotiable = !isNonNegotiable;
            
            if (isNonNegotiable) {
                checkbox.classList.add('checked');
                checkbox.textContent = '‚úì';
            } else {
                checkbox.classList.remove('checked');
                checkbox.textContent = '';
            }
        }

        function addSelfCareBlock() {
            const activity = document.getElementById('activityName').value.trim();
            const day = parseInt(document.getElementById('activityDay').value);
            const time = parseInt(document.getElementById('activityTime').value);
            const duration = parseFloat(document.getElementById('activityDuration').value);
            const notes = document.getElementById('activityNotes').value.trim();
            
            if (!activity) {
                showToast('üí≠ Please enter an activity name');
                return;
            }
            
            const blockDate = new Date(currentWeekStart);
            blockDate.setDate(blockDate.getDate() + day);
            blockDate.setHours(time, 0, 0, 0);
            
            const block = {
                id: Date.now(),
                activity: activity,
                date: blockDate.toISOString(),
                duration: duration,
                nonNegotiable: isNonNegotiable,
                notes: notes,
                completed: false
            };
            
            selfCareBlocks.push(block);
            renderSelfCareBlocks();
            updateStats();
            saveData();
            closeAddBlockModal();
            
            const message = isNonNegotiable ? 
                'üõ°Ô∏è Protected self-care time scheduled!' : 
                '‚ú® Self-care time scheduled!';
            showToast(message);
        }

        function editBlock(blockId) {
            const block = selfCareBlocks.find(b => b.id === blockId);
            if (!block) return;
            
            if (confirm(`Mark "${block.activity}" as completed?`)) {
                block.completed = true;
                updateStats();
                saveData();
                showToast('‚úÖ Self-care completed! You\'re taking great care of yourself!');
            }
        }

        function changeWeek(direction) {
            currentWeekStart.setDate(currentWeekStart.getDate() + (direction * 7));
            generateCalendar();
        }

        function setMood(mood) {
            currentMood = mood;
            
            // Update UI
            document.querySelectorAll('.mood-btn').forEach(btn => {
                btn.classList.remove('selected');
            });
            document.querySelector(`[data-mood="${mood}"]`).classList.add('selected');
            
            // Save mood entry
            const today = new Date().toDateString();
            const existingEntry = moodEntries.find(entry => entry.date === today);
            
            if (existingEntry) {
                existingEntry.mood = mood;
                existingEntry.energy = energyLevel;
            } else {
                moodEntries.push({
                    date: today,
                    mood: mood,
                    energy: energyLevel,
                    timestamp: new Date().toISOString()
                });
            }
            
            updateStats();
            saveData();
            showToast('üíö Mood recorded. Thank you for checking in with yourself.');
        }

        function setEnergy(event) {
            const bar = event.currentTarget;
            const rect = bar.getBoundingClientRect();
            const percentage = Math.round(((event.clientX - rect.left) / rect.width) * 100);
            
            energyLevel = Math.max(0, Math.min(100, percentage));
            
            document.getElementById('energyFill').style.width = `${energyLevel}%`;
            document.getElementById('energyValue').textContent = `${energyLevel}%`;
            
            // Update today's mood entry if it exists
            const today = new Date().toDateString();
            const existingEntry = moodEntries.find(entry => entry.date === today);
            if (existingEntry) {
                existingEntry.energy = energyLevel;
                saveData();
            }
        }

        function loadTodaysMood() {
            const today = new Date().toDateString();
            const todayEntry = moodEntries.find(entry => entry.date === today);
            
            if (todayEntry) {
                currentMood = todayEntry.mood;
                energyLevel = todayEntry.energy;
                
                // Update UI
                if (currentMood) {
                    document.querySelector(`[data-mood="${currentMood}"]`).classList.add('selected');
                }
                
                document.getElementById('energyFill').style.width = `${energyLevel}%`;
                document.getElementById('energyValue').textContent = `${energyLevel}%`;
            }
        }

        function startQuickReset(activity, duration) {
            if (confirm(`Start "${activity}" for ${duration} minutes?\n\nThis is your time to recharge. You deserve this break.`)) {
                showToast(`üåü Starting "${activity}" - You're doing something wonderful for yourself!`);
                
                // Add to today's schedule if not already there
                const today = new Date();
                const block = {
                    id: Date.now(),
                    activity: `Quick Reset: ${activity}`,
                    date: today.toISOString(),
                    duration: duration / 60,
                    nonNegotiable: false,
                    notes: 'Quick reset activity',
                    completed: true
                };
                
                selfCareBlocks.push(block);
                updateStats();
                saveData();
                
                // Set a timer reminder
                setTimeout(() => {
                    showToast(`‚è∞ Your ${duration}-minute "${activity}" time is up. How do you feel?`);
                }, duration * 60 * 1000);
            }
        }

        function startBreathing() {
            const circle = document.getElementById('breathingCircle');
            let isInhaling = true;
            
            if (breathingInterval) {
                clearInterval(breathingInterval);
            }
            
            breathingInterval = setInterval(() => {
                if (isInhaling) {
                    circle.textContent = 'Inhale...';
                    circle.classList.remove('exhale');
                    circle.classList.add('inhale');
                } else {
                    circle.textContent = 'Exhale...';
                    circle.classList.remove('inhale');
                    circle.classList.add('exhale');
                }
                isInhaling = !isInhaling;
            }, 4000);
            
            showToast('ü´Å Breathing exercise started. Focus on your breath.');
        }

        function stopBreathing() {
            if (breathingInterval) {
                clearInterval(breathingInterval);
                breathingInterval = null;
            }
            
            const circle = document.getElementById('breathingCircle');
            circle.textContent = 'Breathe';
            circle.classList.remove('inhale', 'exhale');
            
            showToast('üßò Great job taking a moment to breathe and center yourself.');
        }

        function updateStats() {
            // Calculate weekly hours
            const weekStart = new Date(currentWeekStart);
            const weekEnd = new Date(weekStart);
            weekEnd.setDate(weekEnd.getDate() + 7);
            
            const weeklyBlocks = selfCareBlocks.filter(block => {
                const blockDate = new Date(block.date);
                return blockDate >= weekStart && blockDate < weekEnd;
            });
            
            const weeklyHours = weeklyBlocks.reduce((sum, block) => sum + block.duration, 0);
            const protectedSlots = weeklyBlocks.filter(block => block.nonNegotiable).length;
            
            // Calculate mood trend
            const recentMoods = moodEntries.slice(-7).map(entry => entry.mood);
            let moodTrend = '--';
            if (recentMoods.length >= 2) {
                const recent = recentMoods.slice(-3).reduce((a, b) => a + b, 0) / Math.min(3, recentMoods.length);
                const older = recentMoods.slice(0, -3).reduce((a, b) => a + b, 0) / Math.max(1, recentMoods.length - 3);
                
                if (recent > older + 0.3) moodTrend = 'üìà';
                else if (recent < older - 0.3) moodTrend = 'üìâ';
                else moodTrend = '‚û°Ô∏è';
            }
            
            document.getElementById('weeklyHours').textContent = weeklyHours.toFixed(1);
            document.getElementById('protectedSlots').textContent = protectedSlots;
            document.getElementById('moodTrend').textContent = moodTrend;
        }

        function saveData() {
            localStorage.setItem('caregiverCompass_blocks', JSON.stringify(selfCareBlocks));
            localStorage.setItem('caregiverCompass_moods', JSON.stringify(moodEntries));
            localStorage.setItem('caregiverCompass_energy', energyLevel);
        }

        function loadData() {
            const savedBlocks = localStorage.getItem('caregiverCompass_blocks');
            const savedMoods = localStorage.getItem('caregiverCompass_moods');
            const savedEnergy = localStorage.getItem('caregiverCompass_energy');
            
            if (savedBlocks) {
                selfCareBlocks = JSON.parse(savedBlocks);
            }
            
            if (savedMoods) {
                moodEntries = JSON.parse(savedMoods);
            }
            
            if (savedEnergy) {
                energyLevel = parseInt(savedEnergy);
            }
        }

        function showToast(message) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 4000);
        }

        // Close modal when clicking outside
        document.getElementById('addBlockModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeAddBlockModal();
            }
        });

        // Initialize app
        initializeApp();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'986c71df81050890',t:'MTc1OTE1OTAxOS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
