<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ClinicalNotes Pro - SBAR & Handover Documentation</title>
    <style>
        body {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0d2818 0%, #1a4d2e 50%, #2d5a3d 100%);
            color: #ffffff;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .app-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 15px;
        }

        .header {
            text-align: center;
            padding: 25px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            margin-bottom: 20px;
            border: 2px solid rgba(218, 165, 32, 0.3);
            position: relative;
            backdrop-filter: blur(10px);
        }

        .header h1 {
            margin: 0 0 10px 0;
            font-size: 2.2rem;
            background: linear-gradient(45deg, #daa520, #ffd700, #ffffff, #daa520);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header-subtitle {
            color: #e0e0e0;
            font-size: 1rem;
            margin-bottom: 15px;
        }

        .hipaa-notice {
            background: rgba(218, 165, 32, 0.1);
            border: 1px solid rgba(218, 165, 32, 0.3);
            border-radius: 8px;
            padding: 10px;
            font-size: 0.85rem;
            color: #ffd700;
            margin-top: 10px;
        }

        .main-layout {
            display: grid;
            grid-template-columns: 1fr 320px;
            gap: 20px;
            margin-bottom: 20px;
        }

        .notes-section {
            background: rgba(45, 90, 61, 0.4);
            border-radius: 15px;
            padding: 20px;
            border: 2px solid rgba(218, 165, 32, 0.3);
            backdrop-filter: blur(10px);
        }

        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .sidebar-card {
            background: rgba(45, 90, 61, 0.6);
            border-radius: 12px;
            padding: 18px;
            border: 2px solid rgba(218, 165, 32, 0.3);
            backdrop-filter: blur(10px);
        }

        .section-title {
            font-size: 1.2rem;
            font-weight: bold;
            color: #ffd700;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .quick-actions {
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(218, 165, 32, 0.3);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .action-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 12px;
            margin-bottom: 15px;
        }

        .action-btn, .primary-btn, .secondary-btn, .danger-btn {
            padding: 12px 16px;
            background: linear-gradient(45deg, #daa520, #ffd700);
            color: #0d2818;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            text-align: center;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
        }

        .action-btn:hover, .primary-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(218, 165, 32, 0.4);
            background: linear-gradient(45deg, #b8941c, #e6c200);
        }

        .secondary-btn {
            background: rgba(45, 90, 61, 0.8);
            color: #ffd700;
            border: 1px solid rgba(218, 165, 32, 0.5);
        }

        .secondary-btn:hover {
            background: rgba(45, 90, 61, 1);
            transform: translateY(-2px);
        }

        .danger-btn {
            background: linear-gradient(45deg, #d32f2f, #f44336);
            color: white;
        }

        .danger-btn:hover {
            background: linear-gradient(45deg, #b71c1c, #d32f2f);
            transform: translateY(-2px);
        }

        .do-it-now-btn {
            background: linear-gradient(45deg, #ff6b6b, #ff8a80);
            color: white;
            animation: pulse-glow 2s infinite;
            font-size: 1rem;
            padding: 14px 20px;
        }

        @keyframes pulse-glow {
            0%, 100% { box-shadow: 0 0 15px rgba(255, 107, 107, 0.5); }
            50% { box-shadow: 0 0 25px rgba(255, 107, 107, 0.8); }
        }

        .form-input, .form-select, .form-textarea {
            padding: 12px;
            background: rgba(45, 90, 61, 0.6);
            border: 2px solid rgba(218, 165, 32, 0.3);
            border-radius: 8px;
            color: #ffffff;
            font-size: 0.95rem;
            transition: all 0.3s ease;
            width: 100%;
            box-sizing: border-box;
        }

        .form-input:focus, .form-select:focus, .form-textarea:focus {
            outline: none;
            border-color: #daa520;
            box-shadow: 0 0 15px rgba(218, 165, 32, 0.3);
            background: rgba(45, 90, 61, 0.8);
        }

        .note-card {
            background: rgba(45, 90, 61, 0.4);
            border-radius: 12px;
            padding: 18px;
            margin-bottom: 15px;
            border: 2px solid rgba(218, 165, 32, 0.2);
            transition: all 0.3s ease;
            position: relative;
            backdrop-filter: blur(10px);
        }

        .note-card:hover {
            background: rgba(45, 90, 61, 0.6);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            border-color: rgba(218, 165, 32, 0.4);
        }

        .note-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 12px;
        }

        .note-title {
            font-weight: bold;
            font-size: 1.1rem;
            color: #ffd700;
            margin-bottom: 6px;
        }

        .note-meta {
            color: #e0e0e0;
            font-size: 0.85rem;
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        .sbar-section {
            background: rgba(13, 40, 24, 0.4);
            border-radius: 8px;
            padding: 12px;
            margin: 10px 0;
            border-left: 4px solid #daa520;
        }

        .sbar-label {
            font-weight: bold;
            color: #ffd700;
            font-size: 0.9rem;
            margin-bottom: 6px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .sbar-content {
            color: #e0e0e0;
            line-height: 1.4;
        }

        .priority-indicator {
            position: absolute;
            top: 15px;
            right: 15px;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: bold;
            text-transform: uppercase;
        }

        .priority-high {
            background: rgba(244, 67, 54, 0.8);
            color: white;
        }

        .priority-medium {
            background: rgba(255, 152, 0, 0.8);
            color: white;
        }

        .priority-low {
            background: rgba(76, 175, 80, 0.8);
            color: white;
        }

        .timer-display {
            font-size: 2.2rem;
            font-weight: bold;
            color: #ffd700;
            margin-bottom: 15px;
            font-family: 'Courier New', monospace;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            text-align: center;
        }

        .timer-controls {
            display: flex;
            gap: 8px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .timer-btn {
            padding: 8px 12px;
            background: linear-gradient(45deg, #daa520, #ffd700);
            color: #0d2818;
            border: none;
            border-radius: 15px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.85rem;
        }

        .timer-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(218, 165, 32, 0.4);
        }

        .timer-btn.active {
            background: #ff6b6b;
            color: white;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .voice-btn {
            background: linear-gradient(45deg, #4caf50, #66bb6a);
            color: white;
            padding: 10px;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .voice-btn.recording {
            background: #ff6b6b;
            animation: pulse 1s infinite;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: rgba(45, 90, 61, 0.95);
            margin: 2% auto;
            padding: 25px;
            border-radius: 15px;
            width: 90%;
            max-width: 800px;
            border: 2px solid #daa520;
            max-height: 90vh;
            overflow-y: auto;
            backdrop-filter: blur(10px);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-title {
            color: #ffd700;
            font-size: 1.4rem;
            margin: 0;
        }

        .close {
            color: #ffd700;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .close:hover {
            color: #ffeb3b;
        }

        .template-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 12px;
            margin-bottom: 20px;
        }

        .template-card {
            background: rgba(13, 40, 24, 0.6);
            border: 2px solid rgba(218, 165, 32, 0.3);
            border-radius: 10px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

        .template-card:hover {
            background: rgba(13, 40, 24, 0.8);
            border-color: #daa520;
            transform: translateY(-2px);
        }

        .template-icon {
            font-size: 2rem;
            margin-bottom: 8px;
            display: block;
        }

        .template-name {
            font-weight: bold;
            color: #ffd700;
            margin-bottom: 5px;
        }

        .template-desc {
            font-size: 0.85rem;
            color: #e0e0e0;
        }

        .safety-checklist {
            background: rgba(255, 215, 0, 0.1);
            border: 2px solid rgba(218, 165, 32, 0.3);
            border-radius: 10px;
            padding: 15px;
        }

        .safety-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px;
            background: rgba(13, 40, 24, 0.4);
            border-radius: 6px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .safety-item:hover {
            background: rgba(13, 40, 24, 0.6);
        }

        .safety-checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid #daa520;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .safety-checkbox.checked {
            background: #daa520;
            color: #0d2818;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 12px;
            margin-bottom: 15px;
        }

        .stat-card {
            background: rgba(13, 40, 24, 0.6);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            border: 2px solid rgba(218, 165, 32, 0.3);
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(218, 165, 32, 0.3);
            border-color: #daa520;
        }

        .stat-value {
            font-size: 1.8rem;
            font-weight: bold;
            color: #ffd700;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #e0e0e0;
            font-size: 0.8rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 18px;
            background: rgba(102, 187, 106, 0.95);
            color: white;
            border-radius: 8px;
            z-index: 1500;
            display: none;
            animation: slideIn 0.3s ease;
            border: 1px solid rgba(218, 165, 32, 0.3);
            backdrop-filter: blur(10px);
        }

        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }

        .offline-indicator {
            position: fixed;
            top: 15px;
            left: 15px;
            padding: 6px 12px;
            background: rgba(255, 107, 107, 0.9);
            color: white;
            border-radius: 15px;
            font-size: 0.8rem;
            display: none;
            backdrop-filter: blur(10px);
        }

        .offline-indicator.online {
            background: rgba(102, 187, 106, 0.9);
        }

        .motivational-message {
            background: rgba(255, 215, 0, 0.1);
            border: 1px solid rgba(218, 165, 32, 0.3);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            margin-bottom: 15px;
        }

        .motivational-text {
            color: #ffd700;
            font-style: italic;
            font-size: 1rem;
            margin-bottom: 8px;
            transition: all 0.3s ease;
            transform-origin: center;
        }

        .form-row {
            display: flex;
            gap: 12px;
            margin-bottom: 15px;
            align-items: center;
        }

        .form-row .form-input {
            flex: 1;
        }

        @media (max-width: 768px) {
            .app-container {
                padding: 10px;
            }
            
            .main-layout {
                grid-template-columns: 1fr;
            }
            
            .action-grid {
                grid-template-columns: 1fr;
            }
            
            .timer-display {
                font-size: 1.8rem;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        /* Accessibility improvements */
        button:focus, input:focus, select:focus, textarea:focus {
            outline: 3px solid #ffd700;
            outline-offset: 2px;
        }

        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }

        /* SBAR Template Styling */
        .sbar-form {
            display: grid;
            gap: 15px;
        }

        .sbar-input-group {
            background: rgba(13, 40, 24, 0.3);
            border-radius: 8px;
            padding: 15px;
            border-left: 4px solid #daa520;
        }

        .sbar-input-label {
            font-weight: bold;
            color: #ffd700;
            margin-bottom: 8px;
            display: block;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
        }
    </style>
</head>
<body>
    <div class="offline-indicator" id="offlineIndicator">
        📡 Offline Mode
    </div>

    <div class="notification" id="notification"></div>

    <div class="app-container">
        <div class="header">
            <h1>🏥 ClinicalNotes Pro</h1>
            <div class="header-subtitle">SBAR Documentation & Clinical Handover System</div>
            <div style="margin-top: 15px;">
                <button class="action-btn" onclick="exportToPDF()" style="margin: 0 5px;">📄 Export PDF</button>
                <button class="action-btn" onclick="backupData()" style="margin: 0 5px;">💾 Backup</button>
                <button class="action-btn" onclick="importData()" style="margin: 0 5px;">📥 Import</button>
            </div>
            <div class="hipaa-notice">
                🔒 HIPAA-Conscious Design: All data stored locally on your device. No cloud transmission.
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions">
            <div class="section-title">
                <span>⚡</span> Quick Actions
            </div>
            <div class="action-grid">
                <button class="action-btn" onclick="openNoteModal()">📝 New SBAR Note</button>
                <button class="action-btn" onclick="openTemplateModal()">📋 Templates</button>
                <button class="do-it-now-btn" onclick="doItNow()">🚀 Do It Now</button>
                <button class="action-btn" onclick="openSafetyModal()">✅ Safety Check</button>
            </div>
            
            <div class="form-row">
                <input type="text" class="form-input" id="quickNoteInput" placeholder="Quick note or reminder..." aria-label="Quick note input">
                <button class="voice-btn" onclick="startVoiceInput('quickNoteInput')" aria-label="Voice input">🎤</button>
                <button class="action-btn" onclick="addQuickNote()">Add</button>
            </div>
        </div>

        <!-- Main Layout -->
        <div class="main-layout">
            <div class="notes-section">
                <div class="section-title">
                    <span>📋</span> Clinical Notes
                    <div style="margin-left: auto;">
                        <select class="form-select" id="filterSelect" onchange="filterNotes()" style="width: auto; margin-right: 10px;">
                            <option value="all">All Notes</option>
                            <option value="sbar">SBAR</option>
                            <option value="handover">Handover</option>
                            <option value="assessment">Assessment</option>
                            <option value="plan">Care Plan</option>
                        </select>
                        <select class="form-select" id="priorityFilter" onchange="filterNotes()" style="width: auto;">
                            <option value="all">All Priorities</option>
                            <option value="high">High Priority</option>
                            <option value="medium">Medium Priority</option>
                            <option value="low">Low Priority</option>
                        </select>
                    </div>
                </div>
                
                <div id="notesList">
                    <!-- Notes will be populated here -->
                </div>
            </div>

            <div class="sidebar">
                <!-- Focus Timer -->
                <div class="sidebar-card">
                    <div class="section-title">
                        <span>⏱️</span> Focus Timer
                    </div>
                    <div class="timer-display" id="timerDisplay">25:00</div>
                    <div class="timer-controls">
                        <button class="timer-btn" onclick="startTimer()" id="startBtn">Start</button>
                        <button class="timer-btn" onclick="pauseTimer()">Pause</button>
                        <button class="timer-btn" onclick="resetTimer()">Reset</button>
                    </div>
                </div>

                <!-- Daily Action Prompts -->
                <div class="sidebar-card">
                    <div class="section-title">
                        <span>📅</span> Daily Prompts
                    </div>
                    <div id="dailyPrompts">
                        <!-- Daily prompts will be populated here -->
                    </div>
                </div>

                <!-- Motivational Message -->
                <div class="sidebar-card">
                    <div class="section-title">
                        <span>💪</span> Motivation
                        <div style="margin-left: auto; display: flex; gap: 4px;">
                            <button class="secondary-btn" onclick="rotateMotivationalMessage()" style="padding: 4px 8px; font-size: 0.75rem;" title="Next message">🔄</button>
                            <button class="secondary-btn" onclick="openMotivationModal()" style="padding: 4px 8px; font-size: 0.75rem;">Edit</button>
                        </div>
                    </div>
                    <div class="motivational-message">
                        <div class="motivational-text" id="motivationalText">
                            Excellence in patient care starts with thorough documentation.
                        </div>
                        <div style="text-align: center; margin-top: 8px;">
                            <small style="color: #e0e0e0; font-size: 0.7rem;" id="motivationStatus">Auto-rotating every 2 minutes</small>
                        </div>
                    </div>
                </div>

                <!-- Analytics -->
                <div class="sidebar-card">
                    <div class="section-title">
                        <span>📊</span> Analytics
                    </div>
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value" id="totalNotes">0</div>
                            <div class="stat-label">Total Notes</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="todayNotes">0</div>
                            <div class="stat-label">Today</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="currentStreak">0</div>
                            <div class="stat-label">Day Streak</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="safetyChecks">0</div>
                            <div class="stat-label">Safety Checks</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Note Modal -->
    <div id="noteModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="noteModalTitle">New Clinical Note</h3>
                <span class="close" onclick="closeNoteModal()">&times;</span>
            </div>
            
            <div id="noteModalContent">
                <div class="form-row">
                    <select class="form-select" id="noteType" onchange="updateNoteTemplate()">
                        <option value="sbar">SBAR Note</option>
                        <option value="handover">Handover</option>
                        <option value="assessment">Assessment</option>
                        <option value="plan">Care Plan</option>
                        <option value="general">General Note</option>
                    </select>
                    <select class="form-select" id="notePriority">
                        <option value="low">Low Priority</option>
                        <option value="medium">Medium Priority</option>
                        <option value="high">High Priority</option>
                    </select>
                </div>
                
                <div class="form-row">
                    <input type="text" class="form-input" id="noteTitle" placeholder="Note title or patient identifier..." required>
                    <button class="voice-btn" onclick="startVoiceInput('noteTitle')" aria-label="Voice input for title">🎤</button>
                </div>
                
                <div id="noteTemplate">
                    <!-- Template content will be populated here -->
                </div>
                
                <div style="display: flex; gap: 12px; margin-top: 20px;">
                    <button class="primary-btn" onclick="saveNote()" style="flex: 1;">💾 Save Note</button>
                    <button class="secondary-btn" onclick="closeNoteModal()">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Template Selection Modal -->
    <div id="templateModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Clinical Templates</h3>
                <span class="close" onclick="closeTemplateModal()">&times;</span>
            </div>
            
            <div class="template-grid">
                <div class="template-card" onclick="selectTemplate('sbar')">
                    <span class="template-icon">📋</span>
                    <div class="template-name">SBAR</div>
                    <div class="template-desc">Situation, Background, Assessment, Recommendation</div>
                </div>
                <div class="template-card" onclick="selectTemplate('handover')">
                    <span class="template-icon">🔄</span>
                    <div class="template-name">Handover</div>
                    <div class="template-desc">Shift change communication</div>
                </div>
                <div class="template-card" onclick="selectTemplate('assessment')">
                    <span class="template-icon">🔍</span>
                    <div class="template-name">Assessment</div>
                    <div class="template-desc">Patient evaluation</div>
                </div>
                <div class="template-card" onclick="selectTemplate('plan')">
                    <span class="template-icon">📝</span>
                    <div class="template-name">Care Plan</div>
                    <div class="template-desc">Treatment planning</div>
                </div>
                <div class="template-card" onclick="selectTemplate('discharge')">
                    <span class="template-icon">🏠</span>
                    <div class="template-name">Discharge</div>
                    <div class="template-desc">Discharge planning</div>
                </div>
                <div class="template-card" onclick="selectTemplate('incident')">
                    <span class="template-icon">⚠️</span>
                    <div class="template-name">Incident</div>
                    <div class="template-desc">Incident reporting</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Safety Check Modal -->
    <div id="safetyModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Safety Checklist</h3>
                <span class="close" onclick="closeSafetyModal()">&times;</span>
            </div>
            
            <div class="safety-checklist" id="safetyChecklist">
                <!-- Safety items will be populated here -->
            </div>
            
            <div style="margin-top: 20px;">
                <button class="primary-btn" onclick="completeSafetyCheck()">✅ Complete Safety Check</button>
            </div>
        </div>
    </div>

    <!-- Motivation Modal -->
    <div id="motivationModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Motivational Messages</h3>
                <span class="close" onclick="closeMotivationModal()">&times;</span>
            </div>
            
            <div style="margin-bottom: 20px;">
                <label class="sbar-input-label">Custom Message:</label>
                <textarea class="form-textarea" id="customMotivation" rows="3" placeholder="Enter your motivational message..."></textarea>
            </div>
            
            <div style="margin-bottom: 20px;">
                <label class="sbar-input-label">Preset Messages:</label>
                <div id="presetMessages">
                    <!-- Preset messages will be populated here -->
                </div>
            </div>
            
            <div style="display: flex; gap: 12px;">
                <button class="primary-btn" onclick="saveMotivation()">💾 Save Custom</button>
                <button class="secondary-btn" onclick="resetToPresetRotation(); closeMotivationModal();">🔄 Use Auto-Rotate</button>
                <button class="secondary-btn" onclick="closeMotivationModal()">Cancel</button>
            </div>
        </div>
    </div>

    <input type="file" id="importFile" accept=".json" style="display: none;" onchange="handleImport(event)">

    <script>
        // Global variables
        let notes = [];
        let currentNote = null;
        let timerInterval = null;
        let timerSeconds = 1500; // 25 minutes
        let isTimerRunning = false;
        let recognition = null;
        let currentStreak = 0;
        let safetyChecksCompleted = 0;
        let customMotivationalMessage = "Excellence in patient care starts with thorough documentation.";

        // Clinical templates
        const templates = {
            sbar: {
                name: "SBAR",
                fields: [
                    { key: "situation", label: "Situation", placeholder: "Current patient status, reason for communication..." },
                    { key: "background", label: "Background", placeholder: "Relevant medical history, medications, allergies..." },
                    { key: "assessment", label: "Assessment", placeholder: "Current clinical findings, vital signs, concerns..." },
                    { key: "recommendation", label: "Recommendation", placeholder: "Suggested actions, orders needed, follow-up..." }
                ]
            },
            handover: {
                name: "Handover",
                fields: [
                    { key: "patient_id", label: "Patient ID", placeholder: "Patient identifier..." },
                    { key: "diagnosis", label: "Diagnosis", placeholder: "Primary and secondary diagnoses..." },
                    { key: "treatment", label: "Current Treatment", placeholder: "Medications, interventions, monitoring..." },
                    { key: "concerns", label: "Concerns", placeholder: "Areas requiring attention..." },
                    { key: "plan", label: "Plan", placeholder: "Upcoming procedures, goals..." }
                ]
            },
            assessment: {
                name: "Assessment",
                fields: [
                    { key: "chief_complaint", label: "Chief Complaint", placeholder: "Primary reason for visit..." },
                    { key: "history", label: "History", placeholder: "History of present illness..." },
                    { key: "examination", label: "Physical Examination", placeholder: "Clinical findings..." },
                    { key: "impression", label: "Clinical Impression", placeholder: "Assessment and differential..." }
                ]
            },
            plan: {
                name: "Care Plan",
                fields: [
                    { key: "goals", label: "Goals", placeholder: "Treatment objectives..." },
                    { key: "interventions", label: "Interventions", placeholder: "Planned actions..." },
                    { key: "monitoring", label: "Monitoring", placeholder: "Parameters to track..." },
                    { key: "evaluation", label: "Evaluation", placeholder: "Success criteria..." }
                ]
            }
        };

        // Safety checklist items
        const safetyItems = [
            { id: 1, text: "Patient identification verified", category: "identification" },
            { id: 2, text: "Allergies documented and visible", category: "safety" },
            { id: 3, text: "Medication reconciliation completed", category: "medication" },
            { id: 4, text: "Fall risk assessment current", category: "safety" },
            { id: 5, text: "Code status confirmed", category: "safety" },
            { id: 6, text: "Isolation precautions reviewed", category: "infection" },
            { id: 7, text: "Pain assessment documented", category: "comfort" },
            { id: 8, text: "Discharge planning initiated", category: "planning" }
        ];

        // Daily action prompts
        const dailyPrompts = [
            "Review high-priority patients",
            "Complete safety rounds",
            "Update care plans",
            "Document patient interactions",
            "Check medication orders",
            "Communicate with team members"
        ];

        // Motivational messages
        const presetMotivations = [
            "Excellence in patient care starts with thorough documentation.",
            "Every note you write contributes to better patient outcomes.",
            "Your attention to detail saves lives.",
            "Clear communication prevents medical errors.",
            "You are making a difference in patient safety.",
            "Professional documentation reflects professional care.",
            "Your notes are a vital part of the healthcare team.",
            "Quality documentation supports quality care.",
            "Accurate records protect both patients and providers.",
            "Your clinical notes tell the story of healing.",
            "Detailed documentation ensures continuity of care.",
            "Every SBAR note strengthens patient safety.",
            "Your handover notes guide the next shift's success.",
            "Thorough assessment notes lead to better diagnoses.",
            "Care plans documented today shape tomorrow's outcomes.",
            "Your clinical voice matters - document with purpose.",
            "Safety checks save lives - one note at a time.",
            "Professional growth comes through mindful documentation."
        ];
        
        let currentMotivationIndex = 0;
        let isUsingCustomMotivation = false;

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            loadData();
            updateStats();
            renderNotes();
            renderDailyPrompts();
            renderSafetyChecklist();
            renderPresetMotivations();
            checkOnlineStatus();
            
            // Request notification permission
            if ('Notification' in window && Notification.permission === 'default') {
                Notification.requestPermission();
            }
            
            // Auto-save every 30 seconds
            setInterval(saveData, 30000);
            
            // Update online status
            setInterval(checkOnlineStatus, 5000);
            
            // Initialize with sample data if empty
            if (notes.length === 0) {
                initializeSampleData();
            }
            
            // Initialize motivational message rotation
            initializeMotivationalRotation();
            
            // Rotate motivational message every 2 minutes (120000ms)
            setInterval(rotateMotivationalMessage, 120000);
        });

        function initializeSampleData() {
            notes = [
                {
                    id: 1,
                    title: 'Patient Handover - Room 302',
                    type: 'handover',
                    priority: 'high',
                    content: {
                        patient_id: 'MRN: 123456',
                        diagnosis: 'Post-operative cholecystectomy, day 2',
                        treatment: 'Pain management, ambulation, diet advancement',
                        concerns: 'Mild nausea, requesting pain medication',
                        plan: 'Continue current regimen, monitor for complications'
                    },
                    createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000),
                    updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000)
                },
                {
                    id: 2,
                    title: 'SBAR - Chest Pain Patient',
                    type: 'sbar',
                    priority: 'high',
                    content: {
                        situation: '65-year-old male presenting with acute chest pain',
                        background: 'History of hypertension, diabetes, no known CAD',
                        assessment: 'Chest pain 8/10, diaphoretic, BP 160/95, HR 110',
                        recommendation: 'EKG, cardiac enzymes, cardiology consult'
                    },
                    createdAt: new Date(Date.now() - 4 * 60 * 60 * 1000),
                    updatedAt: new Date(Date.now() - 4 * 60 * 60 * 1000)
                }
            ];
            
            updateStats();
            renderNotes();
        }

        // Note management
        function addQuickNote() {
            const input = document.getElementById('quickNoteInput');
            const content = input.value.trim();
            
            if (!content) {
                showNotification('Please enter a note', 'error');
                return;
            }
            
            const note = {
                id: Date.now(),
                title: content.substring(0, 50) + (content.length > 50 ? '...' : ''),
                type: 'general',
                priority: 'low',
                content: { general: content },
                createdAt: new Date(),
                updatedAt: new Date()
            };
            
            notes.unshift(note);
            input.value = '';
            
            updateStats();
            renderNotes();
            saveData();
            showNotification('📝 Quick note added!');
        }

        function openNoteModal(noteId = null) {
            currentNote = noteId ? notes.find(n => n.id === noteId) : null;
            
            if (currentNote) {
                document.getElementById('noteModalTitle').textContent = 'Edit Clinical Note';
                document.getElementById('noteTitle').value = currentNote.title;
                document.getElementById('noteType').value = currentNote.type;
                document.getElementById('notePriority').value = currentNote.priority;
                updateNoteTemplate();
                populateNoteFields();
            } else {
                document.getElementById('noteModalTitle').textContent = 'New Clinical Note';
                clearNoteForm();
                updateNoteTemplate();
            }
            
            document.getElementById('noteModal').style.display = 'block';
            document.getElementById('noteTitle').focus();
        }

        function updateNoteTemplate() {
            const noteType = document.getElementById('noteType').value;
            const templateContainer = document.getElementById('noteTemplate');
            
            if (templates[noteType]) {
                const template = templates[noteType];
                templateContainer.innerHTML = `
                    <div class="sbar-form">
                        ${template.fields.map(field => `
                            <div class="sbar-input-group">
                                <label class="sbar-input-label">${field.label}</label>
                                <div style="display: flex; gap: 8px; align-items: flex-start;">
                                    <textarea class="form-textarea" id="field_${field.key}" rows="3" placeholder="${field.placeholder}"></textarea>
                                    <button class="voice-btn" onclick="startVoiceInput('field_${field.key}')" aria-label="Voice input for ${field.label}">🎤</button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                `;
            } else {
                templateContainer.innerHTML = `
                    <div class="sbar-input-group">
                        <label class="sbar-input-label">Content</label>
                        <div style="display: flex; gap: 8px; align-items: flex-start;">
                            <textarea class="form-textarea" id="field_general" rows="6" placeholder="Enter your clinical note..."></textarea>
                            <button class="voice-btn" onclick="startVoiceInput('field_general')" aria-label="Voice input">🎤</button>
                        </div>
                    </div>
                `;
            }
        }

        function populateNoteFields() {
            if (currentNote && currentNote.content) {
                Object.keys(currentNote.content).forEach(key => {
                    const field = document.getElementById(`field_${key}`);
                    if (field) {
                        field.value = currentNote.content[key];
                    }
                });
            }
        }

        function saveNote() {
            const title = document.getElementById('noteTitle').value.trim();
            const type = document.getElementById('noteType').value;
            const priority = document.getElementById('notePriority').value;
            
            if (!title) {
                showNotification('Please enter a note title', 'error');
                return;
            }
            
            // Collect content from template fields
            const content = {};
            const template = templates[type];
            
            if (template) {
                template.fields.forEach(field => {
                    const fieldElement = document.getElementById(`field_${field.key}`);
                    if (fieldElement) {
                        content[field.key] = fieldElement.value.trim();
                    }
                });
            } else {
                const generalField = document.getElementById('field_general');
                if (generalField) {
                    content.general = generalField.value.trim();
                }
            }
            
            const noteData = {
                title,
                type,
                priority,
                content,
                updatedAt: new Date()
            };
            
            if (currentNote) {
                // Update existing note
                Object.assign(currentNote, noteData);
                showNotification('📝 Note updated successfully!');
            } else {
                // Create new note
                const newNote = {
                    id: Date.now(),
                    ...noteData,
                    createdAt: new Date()
                };
                notes.unshift(newNote);
                showNotification('📝 Clinical note saved!');
            }
            
            closeNoteModal();
            updateStats();
            renderNotes();
            saveData();
        }

        function clearNoteForm() {
            document.getElementById('noteTitle').value = '';
            document.getElementById('noteType').value = 'sbar';
            document.getElementById('notePriority').value = 'medium';
        }

        function closeNoteModal() {
            document.getElementById('noteModal').style.display = 'none';
            currentNote = null;
        }

        function deleteNote(noteId) {
            const note = notes.find(n => n.id === noteId);
            if (confirm(`Are you sure you want to delete "${note.title}"?`)) {
                notes = notes.filter(n => n.id !== noteId);
                renderNotes();
                updateStats();
                saveData();
                showNotification('Note deleted 🗑️');
            }
        }

        function renderNotes() {
            const container = document.getElementById('notesList');
            const filterType = document.getElementById('filterSelect').value;
            const filterPriority = document.getElementById('priorityFilter').value;
            
            let filteredNotes = notes;
            
            if (filterType !== 'all') {
                filteredNotes = filteredNotes.filter(note => note.type === filterType);
            }
            
            if (filterPriority !== 'all') {
                filteredNotes = filteredNotes.filter(note => note.priority === filterPriority);
            }
            
            if (filteredNotes.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #e0e0e0;">
                        <span style="font-size: 3rem; display: block; margin-bottom: 15px;">📋</span>
                        <h3>No notes found</h3>
                        <p>Create your first clinical note to get started!</p>
                    </div>
                `;
                return;
            }
            
            // Sort notes by creation date (newest first)
            const sortedNotes = [...filteredNotes].sort((a, b) => 
                new Date(b.createdAt) - new Date(a.createdAt)
            );
            
            container.innerHTML = sortedNotes.map(note => createNoteCard(note)).join('');
        }

        function createNoteCard(note) {
            const typeIcons = {
                sbar: '📋',
                handover: '🔄',
                assessment: '🔍',
                plan: '📝',
                general: '📄'
            };
            
            const priorityClass = `priority-${note.priority}`;
            
            return `
                <div class="note-card">
                    <div class="priority-indicator ${priorityClass}">${note.priority}</div>
                    <div class="note-header">
                        <div>
                            <div class="note-title">${note.title}</div>
                            <div class="note-meta">
                                <span>${typeIcons[note.type]} ${note.type.toUpperCase()}</span>
                                <span>📅 ${new Date(note.createdAt).toLocaleDateString()}</span>
                                <span>🕒 ${new Date(note.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
                            </div>
                        </div>
                    </div>
                    
                    ${renderNoteContent(note)}
                    
                    <div style="display: flex; gap: 8px; margin-top: 15px; flex-wrap: wrap;">
                        <button class="secondary-btn" onclick="openNoteModal(${note.id})" style="padding: 6px 10px; font-size: 0.8rem;">✏️ Edit</button>
                        <button class="secondary-btn" onclick="duplicateNote(${note.id})" style="padding: 6px 10px; font-size: 0.8rem;">📋 Duplicate</button>
                        <button class="danger-btn" onclick="deleteNote(${note.id})" style="padding: 6px 10px; font-size: 0.8rem;">🗑️ Delete</button>
                    </div>
                </div>
            `;
        }

        function renderNoteContent(note) {
            if (!note.content) return '';
            
            const template = templates[note.type];
            
            if (template) {
                return template.fields.map(field => {
                    const content = note.content[field.key];
                    if (content && content.trim()) {
                        return `
                            <div class="sbar-section">
                                <div class="sbar-label">${field.label}</div>
                                <div class="sbar-content">${content}</div>
                            </div>
                        `;
                    }
                    return '';
                }).join('');
            } else {
                const content = note.content.general;
                if (content && content.trim()) {
                    return `
                        <div class="sbar-section">
                            <div class="sbar-content">${content}</div>
                        </div>
                    `;
                }
            }
            
            return '';
        }

        function duplicateNote(noteId) {
            const originalNote = notes.find(n => n.id === noteId);
            if (originalNote) {
                const duplicatedNote = {
                    ...originalNote,
                    id: Date.now(),
                    title: `Copy of ${originalNote.title}`,
                    createdAt: new Date(),
                    updatedAt: new Date()
                };
                
                notes.unshift(duplicatedNote);
                renderNotes();
                updateStats();
                saveData();
                showNotification('📋 Note duplicated!');
            }
        }

        function filterNotes() {
            renderNotes();
        }

        // Template management
        function openTemplateModal() {
            document.getElementById('templateModal').style.display = 'block';
        }

        function closeTemplateModal() {
            document.getElementById('templateModal').style.display = 'none';
        }

        function selectTemplate(templateType) {
            closeTemplateModal();
            document.getElementById('noteType').value = templateType;
            updateNoteTemplate();
            openNoteModal();
        }

        // Safety checklist
        function openSafetyModal() {
            document.getElementById('safetyModal').style.display = 'block';
        }

        function closeSafetyModal() {
            document.getElementById('safetyModal').style.display = 'none';
        }

        function renderSafetyChecklist() {
            const container = document.getElementById('safetyChecklist');
            container.innerHTML = safetyItems.map(item => `
                <div class="safety-item" onclick="toggleSafetyItem(${item.id})">
                    <div class="safety-checkbox" id="safety-${item.id}">
                        <span style="display: none;">✓</span>
                    </div>
                    <span>${item.text}</span>
                </div>
            `).join('');
        }

        function toggleSafetyItem(itemId) {
            const checkbox = document.getElementById(`safety-${itemId}`);
            const checkmark = checkbox.querySelector('span');
            
            if (checkbox.classList.contains('checked')) {
                checkbox.classList.remove('checked');
                checkmark.style.display = 'none';
            } else {
                checkbox.classList.add('checked');
                checkmark.style.display = 'block';
            }
        }

        function completeSafetyCheck() {
            const checkedItems = document.querySelectorAll('.safety-checkbox.checked').length;
            
            if (checkedItems === 0) {
                showNotification('Please complete at least one safety check', 'error');
                return;
            }
            
            safetyChecksCompleted++;
            updateStats();
            saveData();
            closeSafetyModal();
            showNotification(`✅ Safety check completed! ${checkedItems} items verified.`);
            
            // Reset checkboxes
            setTimeout(() => {
                renderSafetyChecklist();
            }, 1000);
        }

        // Daily prompts
        function renderDailyPrompts() {
            const container = document.getElementById('dailyPrompts');
            const todayPrompts = dailyPrompts.slice(0, 3); // Show 3 prompts per day
            
            container.innerHTML = todayPrompts.map((prompt, index) => `
                <div class="safety-item" onclick="completePrompt(${index})">
                    <div class="safety-checkbox" id="prompt-${index}">
                        <span style="display: none;">✓</span>
                    </div>
                    <span>${prompt}</span>
                </div>
            `).join('');
        }

        function completePrompt(promptIndex) {
            const checkbox = document.getElementById(`prompt-${promptIndex}`);
            const checkmark = checkbox.querySelector('span');
            
            if (!checkbox.classList.contains('checked')) {
                checkbox.classList.add('checked');
                checkmark.style.display = 'block';
                showNotification('✅ Daily prompt completed!');
            }
        }

        // Motivational messages
        function openMotivationModal() {
            document.getElementById('customMotivation').value = customMotivationalMessage;
            document.getElementById('motivationModal').style.display = 'block';
        }

        function closeMotivationModal() {
            document.getElementById('motivationModal').style.display = 'none';
        }

        function renderPresetMotivations() {
            const container = document.getElementById('presetMessages');
            container.innerHTML = presetMotivations.map((message, index) => `
                <div class="safety-item" onclick="selectPresetMotivation('${message}')">
                    <span>${message}</span>
                </div>
            `).join('');
        }

        function selectPresetMotivation(message) {
            document.getElementById('customMotivation').value = message;
        }

        function saveMotivation() {
            const newMessage = document.getElementById('customMotivation').value.trim();
            if (newMessage) {
                customMotivationalMessage = newMessage;
                isUsingCustomMotivation = true;
                document.getElementById('motivationalText').textContent = newMessage;
                document.getElementById('motivationStatus').textContent = 'Custom message';
                saveData();
                showNotification('💪 Custom motivational message saved!');
            }
            closeMotivationModal();
        }

        function initializeMotivationalRotation() {
            // If user has a custom message, use it initially
            if (customMotivationalMessage && customMotivationalMessage !== "Excellence in patient care starts with thorough documentation.") {
                isUsingCustomMotivation = true;
                document.getElementById('motivationalText').textContent = customMotivationalMessage;
                document.getElementById('motivationStatus').textContent = 'Custom message';
            } else {
                // Start with a random preset message
                isUsingCustomMotivation = false;
                currentMotivationIndex = Math.floor(Math.random() * presetMotivations.length);
                document.getElementById('motivationalText').textContent = presetMotivations[currentMotivationIndex];
                document.getElementById('motivationStatus').textContent = 'Auto-rotating every 2 minutes';
            }
        }

        function rotateMotivationalMessage() {
            // Only rotate if not using a custom message
            if (!isUsingCustomMotivation) {
                currentMotivationIndex = (currentMotivationIndex + 1) % presetMotivations.length;
                const messageElement = document.getElementById('motivationalText');
                
                // Add fade effect
                messageElement.style.opacity = '0.5';
                messageElement.style.transform = 'scale(0.95)';
                
                setTimeout(() => {
                    messageElement.textContent = presetMotivations[currentMotivationIndex];
                    messageElement.style.opacity = '1';
                    messageElement.style.transform = 'scale(1)';
                }, 300);
                
                // Show subtle notification for new motivation
                if (Math.random() < 0.3) { // 30% chance to show notification
                    showNotification('💪 New motivation loaded!');
                }
            }
        }

        function resetToPresetRotation() {
            isUsingCustomMotivation = false;
            currentMotivationIndex = Math.floor(Math.random() * presetMotivations.length);
            document.getElementById('motivationalText').textContent = presetMotivations[currentMotivationIndex];
            document.getElementById('motivationStatus').textContent = 'Auto-rotating every 2 minutes';
            saveData();
            showNotification('🔄 Switched to auto-rotating motivational messages!');
        }

        // Focus Timer
        function startTimer() {
            if (!isTimerRunning) {
                isTimerRunning = true;
                document.getElementById('startBtn').textContent = 'Running...';
                document.getElementById('startBtn').classList.add('active');
                
                timerInterval = setInterval(() => {
                    timerSeconds--;
                    updateTimerDisplay();
                    
                    if (timerSeconds <= 0) {
                        completeTimer();
                    }
                }, 1000);
                
                showNotification('⏱️ Focus session started! Time for focused clinical work.');
            }
        }

        function pauseTimer() {
            if (isTimerRunning) {
                isTimerRunning = false;
                clearInterval(timerInterval);
                document.getElementById('startBtn').textContent = 'Resume';
                document.getElementById('startBtn').classList.remove('active');
                showNotification('Timer paused ⏸️');
            }
        }

        function resetTimer() {
            isTimerRunning = false;
            clearInterval(timerInterval);
            timerSeconds = 1500; // 25 minutes
            updateTimerDisplay();
            document.getElementById('startBtn').textContent = 'Start';
            document.getElementById('startBtn').classList.remove('active');
            showNotification('Timer reset 🔄');
        }

        function updateTimerDisplay() {
            const minutes = Math.floor(timerSeconds / 60);
            const seconds = timerSeconds % 60;
            document.getElementById('timerDisplay').textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function completeTimer() {
            isTimerRunning = false;
            clearInterval(timerInterval);
            
            resetTimer();
            showNotification('🎉 Focus session complete! Great work on your clinical documentation!');
            
            // Show notification
            if (Notification.permission === 'granted') {
                new Notification('⏱️ Focus Timer Complete!', {
                    body: 'Great job! Time to take a break or continue with your clinical work.',
                    icon: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y=".9em" font-size="90">🏥</text></svg>'
                });
            }
        }

        // Do It Now feature
        function doItNow() {
            const actions = [
                "Complete that pending note",
                "Review high-priority patients",
                "Update medication reconciliation",
                "Document patient interaction",
                "Complete safety checklist",
                "Review care plans"
            ];
            
            const randomAction = actions[Math.floor(Math.random() * actions.length)];
            showNotification(`🚀 Do It Now: ${randomAction}`, 'action');
        }

        // Voice input
        function startVoiceInput(targetId) {
            if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                showNotification('Voice input not supported in this browser', 'error');
                return;
            }

            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            recognition = new SpeechRecognition();
            recognition.continuous = false;
            recognition.interimResults = false;
            recognition.lang = 'en-US';

            const voiceBtn = event.target;
            voiceBtn.classList.add('recording');
            voiceBtn.textContent = '🔴';

            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript;
                document.getElementById(targetId).value = transcript;
                voiceBtn.classList.remove('recording');
                voiceBtn.textContent = '🎤';
                showNotification('Voice input captured! 🎤');
            };

            recognition.onerror = function(event) {
                voiceBtn.classList.remove('recording');
                voiceBtn.textContent = '🎤';
                showNotification('Voice recognition error: ' + event.error, 'error');
            };

            recognition.onend = function() {
                voiceBtn.classList.remove('recording');
                voiceBtn.textContent = '🎤';
            };

            recognition.start();
        }

        // Statistics and analytics
        function updateStats() {
            const totalNotes = notes.length;
            const todayNotes = calculateTodayNotes();
            const streakValue = calculateStreak();
            
            document.getElementById('totalNotes').textContent = totalNotes;
            document.getElementById('todayNotes').textContent = todayNotes;
            document.getElementById('currentStreak').textContent = streakValue;
            document.getElementById('safetyChecks').textContent = safetyChecksCompleted;
            
            currentStreak = streakValue;
        }

        function calculateTodayNotes() {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            return notes.filter(note => {
                const noteDate = new Date(note.createdAt);
                noteDate.setHours(0, 0, 0, 0);
                return noteDate.getTime() === today.getTime();
            }).length;
        }

        function calculateStreak() {
            if (notes.length === 0) return 0;
            
            const sortedNotes = [...notes].sort((a, b) => 
                new Date(b.createdAt) - new Date(a.createdAt)
            );
            
            let streak = 0;
            let currentDate = new Date();
            currentDate.setHours(0, 0, 0, 0);
            
            for (let note of sortedNotes) {
                const noteDate = new Date(note.createdAt);
                noteDate.setHours(0, 0, 0, 0);
                
                const diffTime = currentDate - noteDate;
                const diffDays = diffTime / (1000 * 60 * 60 * 24);
                
                if (diffDays <= streak + 1) {
                    if (diffDays === streak) {
                        streak++;
                        currentDate.setDate(currentDate.getDate() - 1);
                    }
                } else {
                    break;
                }
            }
            
            return streak;
        }

        // Data management (HIPAA-conscious)
        function saveData() {
            const data = {
                notes: notes,
                currentStreak: currentStreak,
                safetyChecksCompleted: safetyChecksCompleted,
                customMotivationalMessage: customMotivationalMessage,
                isUsingCustomMotivation: isUsingCustomMotivation,
                currentMotivationIndex: currentMotivationIndex,
                lastSaved: new Date().toISOString()
            };
            
            // Use localStorage for HIPAA-conscious local storage
            localStorage.setItem('clinicalNotes_data', JSON.stringify(data));
        }

        function loadData() {
            const savedData = localStorage.getItem('clinicalNotes_data');
            if (savedData) {
                const data = JSON.parse(savedData);
                notes = data.notes || [];
                currentStreak = data.currentStreak || 0;
                safetyChecksCompleted = data.safetyChecksCompleted || 0;
                customMotivationalMessage = data.customMotivationalMessage || "Excellence in patient care starts with thorough documentation.";
                isUsingCustomMotivation = data.isUsingCustomMotivation || false;
                currentMotivationIndex = data.currentMotivationIndex || 0;
            }
        }

        function exportToPDF() {
            const totalNotes = notes.length;
            const todayNotes = calculateTodayNotes();
            const streakValue = calculateStreak();
            
            const content = `
CLINICAL NOTES REPORT
Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}

SUMMARY
=======
Total Notes: ${totalNotes}
Today's Notes: ${todayNotes}
Current Streak: ${streakValue} days
Safety Checks Completed: ${safetyChecksCompleted}

RECENT CLINICAL NOTES
====================
${notes.slice(0, 20).map(note => `
📋 ${note.title}
   Type: ${note.type.toUpperCase()}
   Priority: ${note.priority.toUpperCase()}
   Created: ${new Date(note.createdAt).toLocaleString()}
   
   ${renderNoteContentForExport(note)}
`).join('\n')}

NOTES BY TYPE
=============
${Object.entries(
    notes.reduce((acc, note) => {
        acc[note.type] = (acc[note.type] || 0) + 1;
        return acc;
    }, {})
).map(([type, count]) => `${type.toUpperCase()}: ${count} notes`).join('\n')}

PRIORITY BREAKDOWN
==================
${Object.entries(
    notes.reduce((acc, note) => {
        acc[note.priority] = (acc[note.priority] || 0) + 1;
        return acc;
    }, {})
).map(([priority, count]) => `${priority.toUpperCase()}: ${count} notes`).join('\n')}
            `.trim();
            
            const blob = new Blob([content], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `clinical-notes-report-${new Date().toISOString().split('T')[0]}.txt`;
            a.click();
            URL.revokeObjectURL(url);
            showNotification('📄 Clinical notes report exported!');
        }

        function renderNoteContentForExport(note) {
            if (!note.content) return '';
            
            const template = templates[note.type];
            
            if (template) {
                return template.fields.map(field => {
                    const content = note.content[field.key];
                    if (content && content.trim()) {
                        return `   ${field.label}: ${content}`;
                    }
                    return '';
                }).filter(line => line).join('\n');
            } else {
                const content = note.content.general;
                return content ? `   Content: ${content}` : '';
            }
        }

        function backupData() {
            const data = {
                notes: notes,
                currentStreak: currentStreak,
                safetyChecksCompleted: safetyChecksCompleted,
                customMotivationalMessage: customMotivationalMessage,
                exportDate: new Date().toISOString(),
                version: "1.0"
            };
            
            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `clinical-notes-backup-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);
            showNotification('💾 Data backed up securely!');
        }

        function importData() {
            document.getElementById('importFile').click();
        }

        function handleImport(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    
                    if (confirm('This will replace all current data. Continue?')) {
                        notes = data.notes || [];
                        currentStreak = data.currentStreak || 0;
                        safetyChecksCompleted = data.safetyChecksCompleted || 0;
                        customMotivationalMessage = data.customMotivationalMessage || "Excellence in patient care starts with thorough documentation.";
                        
                        renderNotes();
                        updateStats();
                        document.getElementById('motivationalText').textContent = customMotivationalMessage;
                        saveData();
                        showNotification('📥 Data imported successfully!');
                    }
                } catch (error) {
                    showNotification('Invalid backup file', 'error');
                }
            };
            reader.readAsText(file);
        }

        // Offline functionality
        function checkOnlineStatus() {
            const indicator = document.getElementById('offlineIndicator');
            if (navigator.onLine) {
                indicator.textContent = '📡 Online';
                indicator.classList.add('online');
                indicator.style.display = 'block';
                setTimeout(() => {
                    indicator.style.display = 'none';
                }, 2000);
            } else {
                indicator.textContent = '📡 Offline Mode - Data Secure Locally';
                indicator.classList.remove('online');
                indicator.style.display = 'block';
            }
        }

        // Notifications
        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.style.display = 'block';
            
            switch(type) {
                case 'error':
                    notification.style.background = 'rgba(255, 107, 107, 0.95)';
                    break;
                case 'action':
                    notification.style.background = 'rgba(255, 152, 0, 0.95)';
                    break;
                default:
                    notification.style.background = 'rgba(102, 187, 106, 0.95)';
            }
            
            setTimeout(() => {
                notification.style.display = 'none';
            }, 4000);
        }

        // Modal close functionality
        window.onclick = function(event) {
            const modals = ['noteModal', 'templateModal', 'safetyModal', 'motivationModal'];
            modals.forEach(modalId => {
                const modal = document.getElementById(modalId);
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 'n':
                        e.preventDefault();
                        openNoteModal();
                        break;
                    case 's':
                        e.preventDefault();
                        saveData();
                        showNotification('💾 Data saved manually');
                        break;
                    case 'e':
                        e.preventDefault();
                        exportToPDF();
                        break;
                    case 'b':
                        e.preventDefault();
                        backupData();
                        break;
                    case 't':
                        e.preventDefault();
                        openTemplateModal();
                        break;
                }
            }
            
            if (e.key === 'Escape') {
                document.querySelectorAll('.modal').forEach(modal => {
                    modal.style.display = 'none';
                });
            }
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9871e2cab7a9bc4b',t:'MTc1OTIxNjA3My4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
